<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/x-icon"
      href="https://img.freepik.com/premium-vector/pawn-chess-icon_535345-3365.jpg"
    />
    <title>Home</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        text-align: center;
        margin: 50px;
      }

      h2 {
        color: #333;
      }

      .button-container {
        display: flex;
        justify-content: space-around;
        margin-top: 20px;
      }

      .button-container a,
      .button-container form {
        text-decoration: none;
        color: #fff;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        font-size: 16px;
        transition: background-color 0.3s;
      }

      .button-container a {
        background-color: #4caf50; /* Green */
      }

      .button-container form {
        background-color: #f44336; /* Red */
      }

      .button-container a:hover,
      .button-container form:hover {
        background-color: #45a049; /* Darker green */
      }
    </style>
  </head>
  <body>
    <h2>Welcome to the Home Page</h2>
    <div class="button-container">
      <a href="/auth/google">Google</a>
      <a href="/auth/logout">Log out now</a>
      <a href="/users">all users</a>
    </div>

    <!-- Join Room -->
    <div>
      <input type="text" id="joinRoom" placeholder="Enter Room Id" />
      <button onclick="joinRoom()">Join Room</button>
    </div>

    <!-- Add the chat input and button -->
    <div>
      <input type="text" id="chatInput" placeholder="Type your message..." />
      <button onclick="sendMessage()">‚è©</button>
    </div>

    <ul id="chatMessages"></ul>

    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script>
      const socket = io();
      socket.on('connection', () => {
        console.log('a user connected');
      });
      socket.on('disconnect', () => {
        console.log('user disconnected');
      });

      // Function to send a chat message
      function sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value;
        if (message.trim() !== '') {
          // Emit the 'chatMessage' event to the server
          socket.emit('chatMessage', { message });
          input.value = '';
        }
      }

      // Listen for 'chatMessage' events from the server
      socket.on('chatMessage', (data) => {
        // Append the received message to the chatMessages list
        const ul = document.getElementById('chatMessages');
        const li = document.createElement('li');
        li.appendChild(document.createTextNode(data.message));
        ul.appendChild(li);
      });

      // join Room
      async function joinRoom() {
        // Get the room ID from the input field
        const roomId = document.getElementById('joinRoom').value;

        try {
          // Make a POST request to the /join endpoint
          const response = await fetch('/room/joinroom', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ roomId }),
          });

          // Check if the request was successful (status code 200-299)
          if (response.ok) {
            // Handle the response if needed
            const result = await response.json();
            console.log(result);
          } else {
            // Handle errors or other status codes
            console.error('Error joining room:', response.statusText);
          }
        } catch (error) {
          // Handle network or other errors
          console.error('Error joining room:', error.message);
        }
      }
    </script>
  </body>
</html>
